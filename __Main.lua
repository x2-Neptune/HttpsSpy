local a=_G.Fluxus;assert(syn or http,"Unsupport exploit (should support syn.request or http.request)")local b=({...})[1]or{AutoDecode=true,Highlighting=true,SaveLogs=true,CLICommands=true,ShowResponse=true,BlockedURLs={},API=true}local c="X"local d=string.format("%d-%s-log.txt",game.PlaceId,os.date("%d_%m_%y"))if b.SaveLogs then writefile(d,string.format("Http Logs from %s\n\n",os.date("%d/%m/%y")))end;local e=loadstring(game:HttpGet("https://raw.githubusercontent.com/x2-Neptune/HttpsSpy/main/Loader/__Nexus.lua"))()local f=clonefunction;local g=f(print)local h=f(string.format)local i=f(string.gsub)local j=f(string.match)local k=f(appendfile)local l=f(type)local m=f(coroutine.running)local n=f(coroutine.wrap)local o=f(coroutine.resume)local p=f(coroutine.yield)local q=f(pcall)local r=f(pairs)local s=f(error)local getnamecallmethod=f(getnamecallmethod)local t=b.BlockedURLs;local u=true;local v=syn or http.request;local w=syn and"syn"or"http"local x={}local y={}local z={HttpGet=not syn,HttpGetAsync=not syn,GetObjects=true,HttpPost=not a,HttpPostAsync=not syn}e.UpdateConfig({highlighting=b.Highlighting})local A=game.HttpService:JSONDecode(game:HttpGet("https://api.github.com/repos/x2-Neptune/HttpsSpy/commits?per_page=1&path=__Main.lua"))[1].commit.message;local B=Instance.new("BindableEvent")local function C(...)if b.SaveLogs then k(d,i(h(...),"%\27%[%d+m",""))end;return g(h(...))end;local function D(E)for F,G in r(getgc(true))do if type(G)=="function"and islclosure(G)and getfenv(G).script==getfenv(saveinstance).script and table.find(debug.getconstants(G),E)then return G end end end;local function H(I,J)J=J or{}for F,G in r(I)do if l(G)=="table"then J[F]=H(G)end;J[F]=G end;return J end;local K,L;K=hookmetamethod(game,"__namecall",newcclosure(function(self,...)local M=getnamecallmethod()if z[M]then C("game:%s(%s)\n\n",M,e.FormatArguments(...))end;return K(self,...)end))L=hookfunction(v,newcclosure(function(N)if l(N)~="table"then return L(N)end;local O=H(N)if not u then return L(N)end;if l(O.Url)~="string"then return L(N)end;if not b.ShowResponse then C("%s.request(%s)\n\n",w,e.Serialize(O))return L(N)end;local P=m()n(function()if O.Url and t[O.Url]then C("%s.request(%s) -- blocked url\n\n",w,e.Serialize(O))return o(P,{})end;if O.Url then local Q=string.match(O.Url,"https?://(%w+.%w+)/")if Q and y[Q]then O.Url=i(O.Url,Q,y[Q],1)end end;B:Fire(O)local R,S=q(L,O)if not R then s(S,0)end;local T={}for F,G in r(S)do T[F]=G end;if T.Headers["Content-Type"]and j(T.Headers["Content-Type"],"application/json")and b.AutoDecode then local U=T.Body;local R,V=q(game.HttpService.JSONDecode,game.HttpService,U)if R then T.Body=V end end;C("%s.request(%s)\n\nResponse Data: %s\n\n",w,e.Serialize(O),e.Serialize(T))o(P,x[O.Url]and x[O.Url](S)or S)end)()return p()end))if request then replaceclosure(request,v)end;if syn and syn.websocket then local W,X=debug.getupvalue(syn.websocket.connect,1)X=hookfunction(W,function(...)C("syn.websocket.connect(%s)\n\n",e.FormatArguments(...))return X(...)end)end;if syn and syn.websocket then local Y;Y=hookfunction(getupvalue(D("ZeZLm2hpvGJrD6OP8A3aEszPNEw8OxGb"),2),function(self,...)C("game.HttpGet(game, %s)\n\n",e.FormatArguments(...))return Y(self,...)end)local Z;Z=hookfunction(getupvalue(D("gpGXBVpEoOOktZWoYECgAY31o0BlhOue"),2),function(self,...)C("game.HttpPost(game, %s)\n\n",e.FormatArguments(...))return Z(self,...)end)end;for M,u in r(z)do if u then local _;_=hookfunction(game[M],newcclosure(function(self,...)C("game.%s(game, %s)\n\n",M,e.FormatArguments(...))return _(self,...)end))end end;if not debug.info(2,"f")then g("You are running an outdated version")end;g(h("HttpSpy %s \nChange Logs:\n\t%s\nLogs are automatically being saved to: \27[32m%s\27[0m\n\n",c,A,b.SaveLogs and d or"(You aren't saving logs, enable SaveLogs if you want to save logs)"))if not b.API then return end;local a0={}a0.OnRequest=B.Event;function a0:HookSynRequest(a1,a2)x[a1]=a2 end;function a0:ProxyHost(a3,a4)y[a3]=a4 end;function a0:RemoveProxy(a3)if not y[a3]then error("host isn't proxied",0)end;y[a3]=nil end;function a0:UnHookSynRequest(a1)if not x[a1]then error("url isn't hooked",0)end;x[a1]=nil end;function a0:BlockUrl(a1)t[a1]=true end;function a0:WhitelistUrl(a1)t[a1]=false end;return a0
